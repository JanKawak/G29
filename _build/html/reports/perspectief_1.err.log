Traceback (most recent call last):
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jankawak/anaconda3/lib/python3.11/asyncio/base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/jankawak/anaconda3/lib/python3.11/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
from scipy.stats import pearsonr
import plotly.graph_objects as go
import plotly.io as pio
pio.renderers.default = "iframe"

# â”€â”€â”€â”€â”€ 1. Data inlezen â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
MENTAL_CSV = "Data/mental_welfare_dataset.csv"
CPDS_CSV   = "Data/cpds-1960-2022-update-2024-2.csv"

mental = pd.read_csv(MENTAL_CSV).rename(columns={"Unnamed: 0": "drop"}, errors="ignore")
cpds = pd.read_csv(CPDS_CSV)
cpds.columns = [c.lower() for c in cpds.columns]

# â”€â”€â”€â”€â”€ 2. Harmonisatie â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
rename = {"United States of America": "United States",
          "Czech Republic": "Czechia", "Russian Federation": "Russia"}
for d in (mental, cpds):
    d["country"] = d["country"].replace(rename)

mental.rename(columns={"life_ladder": "ladder"}, inplace=True)

# â”€â”€â”€â”€â”€ 3. Variabelen â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
social_vars_all = [s.lower() for s in [
    "sstran", "socexp_t_pmp", "socexp_c_pmp", "socexp_k_pmp",
    "oldage_pmp", "survivor_pmp", "incapben_pmp", "health_pmp",
    "family_pmp", "fallow_pmp", "mpleave_pmp", "childcare_pmp",
    "homehelp_pmp", "unemp_pmp", "almp_pmp", "training_pmp",
    "housing_pmp", "othsocx_pmp"
]]
social_vars = [v for v in social_vars_all if v in cpds.columns]

# â”€â”€â”€â”€â”€ 4. Merge â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
merged = mental.merge(cpds[["country", "year"] + social_vars],
                      on=["country", "year"], how="inner").dropna()

# â”€â”€â”€â”€â”€ 5. Correlatie berekenen en filteren â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
r_values = []
filtered_vars = []
for s in social_vars:
    r = pearsonr(merged["ladder"], merged[s])[0]
    if r >= 0.4:  # Alleen positieve verbanden >= 0.4
        r_values.append(r)
        filtered_vars.append(s)

# â”€â”€â”€â”€â”€ 6. Labels en uitleg â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
soc_lbl = {
    "sstran": "Soc. transfers %GDP",
    "socexp_t_pmp": "Total soc. exp.",
    "socexp_c_pmp": "Cash soc. exp.",
    "socexp_k_pmp": "In-kind soc. exp.",
    "oldage_pmp": "Old-age ben.",
    "survivor_pmp": "Survivor ben.",
    "incapben_pmp": "Incapacity ben.",
    "health_pmp": "Health exp.",
    "family_pmp": "Family ben.",
    "fallow_pmp": "Family allowance",
    "mpleave_pmp": "Mat./Pat. leave",
    "childcare_pmp": "Child-care ben.",
    "homehelp_pmp": "Home-help ben.",
    "unemp_pmp": "Unemployment ben.",
    "almp_pmp": "ALMP programmes",
    "training_pmp": "Training prog.",
    "housing_pmp": "Housing ben.",
    "othsocx_pmp": "Other soc. exp."
}

soc_expl = {
    "sstran": "Overheidsuitgaven aan sociale transfers als % van het BBP.",
    "socexp_t_pmp": "Totale sociale overheidsuitgaven per hoofd van de bevolking.",
    "socexp_c_pmp": "Sociale uitgaven in geld, per persoon.",
    "socexp_k_pmp": "Sociale uitgaven in natura (zoals gezondheidszorg), per persoon.",
    "oldage_pmp": "Overheidsuitgaven aan pensioenen, per persoon.",
    "survivor_pmp": "Uitgaven aan nabestaanden, per persoon.",
    "incapben_pmp": "Uitgaven aan arbeidsongeschiktheid, per persoon.",
    "health_pmp": "Overheidsuitgaven aan gezondheidszorg, per persoon.",
    "family_pmp": "Overheidsuitgaven aan gezinsvoordelen, per persoon.",
    "fallow_pmp": "Kinderbijslag en soortgelijke voordelen, per persoon.",
    "mpleave_pmp": "Uitgaven aan ouderschapsverlof, per persoon.",
    "childcare_pmp": "Uitgaven aan kinderopvang, per persoon.",
    "homehelp_pmp": "Uitgaven aan thuishulp voor ouderen/zieken.",
    "unemp_pmp": "Uitgaven aan werkloosheidsuitkeringen, per persoon.",
    "almp_pmp": "Actief arbeidsmarktbeleid, zoals training/subsidies.",
    "training_pmp": "Training- en omscholingsprogramma's, per persoon.",
    "housing_pmp": "Uitgaven aan huisvestingssteun, per persoon.",
    "othsocx_pmp": "Overige sociale uitgaven, per persoon."
}

col_labels = [soc_lbl.get(s, s) for s in filtered_vars]

# â”€â”€â”€â”€â”€ 7. Sorting toepassen â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
combined = sorted(zip(col_labels, r_values, filtered_vars), key=lambda x: x[1])
col_labels_sorted = [x[0] for x in combined]
r_values_sorted = [x[1] for x in combined]
filtered_vars_sorted = [x[2] for x in combined]

# â”€â”€â”€â”€â”€ 8. Hovertekst opnieuw genereren â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
hover_text_sorted = []
for i in range(len(r_values_sorted)):
    uitleg = soc_expl.get(filtered_vars_sorted[i], "")
    tekst = (
        f"<b>{col_labels_sorted[i]}</b><br>"
        f"{uitleg}<br><br>"
        f"Verband: {r_values_sorted[i]:.2f}<br>"
        f"Hoger â†’ meer geluk"
    )
    hover_text_sorted.append(tekst)

# â”€â”€â”€â”€â”€ 9. Heatmap tekenen â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
fig = go.Figure()

fig.add_trace(go.Heatmap(
    z=[r_values_sorted],
    x=col_labels_sorted,
    y=["Geluksscore"],
    colorscale='reds',
    zmin=0,
    zmax=1,
    text=[hover_text_sorted],
    hoverinfo="text",
    showscale=False  # Geen kleurbar
))

fig.update_layout(
    title="Sterkte van positieve verbanden tussen overheidsuitgaven en geluk",
    xaxis_title="Soort overheidsuitgave (oplopend verband)",
    xaxis_tickangle=-45,
    width=1100,
    height=300,
    font=dict(size=12),
    plot_bgcolor='white',
    margin=dict(l=100, r=100, t=100, b=120)
)

fig.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mIndexError[0m                                Traceback (most recent call last)
Cell [0;32mIn[1], line 136[0m
[1;32m    113[0m fig[38;5;241m.[39madd_trace(go[38;5;241m.[39mHeatmap(
[1;32m    114[0m     z[38;5;241m=[39m[r_values_sorted],
[1;32m    115[0m     x[38;5;241m=[39mcol_labels_sorted,
[0;32m   (...)[0m
[1;32m    122[0m     showscale[38;5;241m=[39m[38;5;28;01mFalse[39;00m  [38;5;66;03m# Geen kleurbar[39;00m
[1;32m    123[0m ))
[1;32m    125[0m fig[38;5;241m.[39mupdate_layout(
[1;32m    126[0m     title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mSterkte van positieve verbanden tussen overheidsuitgaven en geluk[39m[38;5;124m"[39m,
[1;32m    127[0m     xaxis_title[38;5;241m=[39m[38;5;124m"[39m[38;5;124mSoort overheidsuitgave (oplopend verband)[39m[38;5;124m"[39m,
[0;32m   (...)[0m
[1;32m    133[0m     margin[38;5;241m=[39m[38;5;28mdict[39m(l[38;5;241m=[39m[38;5;241m100[39m, r[38;5;241m=[39m[38;5;241m100[39m, t[38;5;241m=[39m[38;5;241m100[39m, b[38;5;241m=[39m[38;5;241m120[39m)
[1;32m    134[0m )
[0;32m--> 136[0m fig[38;5;241m.[39mshow()

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/basedatatypes.py:3398[0m, in [0;36mBaseFigure.show[0;34m(self, *args, **kwargs)[0m
[1;32m   3365[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m   3366[0m [38;5;124;03mShow a figure using either the default renderer(s) or the renderer(s)[39;00m
[1;32m   3367[0m [38;5;124;03mspecified by the renderer argument[39;00m
[0;32m   (...)[0m
[1;32m   3394[0m [38;5;124;03mNone[39;00m
[1;32m   3395[0m [38;5;124;03m"""[39;00m
[1;32m   3396[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mplotly[39;00m[38;5;21;01m.[39;00m[38;5;21;01mio[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mpio[39;00m
[0;32m-> 3398[0m [38;5;28;01mreturn[39;00m pio[38;5;241m.[39mshow([38;5;28mself[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/io/_renderers.py:388[0m, in [0;36mshow[0;34m(fig, renderer, validate, **kwargs)[0m
[1;32m    385[0m fig_dict [38;5;241m=[39m validate_coerce_fig_to_dict(fig, validate)
[1;32m    387[0m [38;5;66;03m# Mimetype renderers[39;00m
[0;32m--> 388[0m bundle [38;5;241m=[39m renderers[38;5;241m.[39m_build_mime_bundle(fig_dict, renderers_string[38;5;241m=[39mrenderer, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[1;32m    389[0m [38;5;28;01mif[39;00m bundle:
[1;32m    390[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ipython_display:

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/io/_renderers.py:296[0m, in [0;36mRenderersConfig._build_mime_bundle[0;34m(self, fig_dict, renderers_string, **kwargs)[0m
[1;32m    293[0m             [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(renderer, k):
[1;32m    294[0m                 [38;5;28msetattr[39m(renderer, k, v)
[0;32m--> 296[0m         bundle[38;5;241m.[39mupdate(renderer[38;5;241m.[39mto_mimebundle(fig_dict))
[1;32m    298[0m [38;5;28;01mreturn[39;00m bundle

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/io/_base_renderers.py:570[0m, in [0;36mIFrameRenderer.to_mimebundle[0;34m(self, fig_dict)[0m
[1;32m    567[0m     iframe_height [38;5;241m=[39m [38;5;28mstr[39m([38;5;241m525[39m [38;5;241m+[39m iframe_buffer) [38;5;241m+[39m [38;5;124m"[39m[38;5;124mpx[39m[38;5;124m"[39m
[1;32m    569[0m [38;5;66;03m# Build filename using ipython cell number[39;00m
[0;32m--> 570[0m filename [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mbuild_filename()
[1;32m    572[0m [38;5;66;03m# Make directory for[39;00m
[1;32m    573[0m [38;5;28;01mtry[39;00m:

File [0;32m~/anaconda3/lib/python3.11/site-packages/plotly/io/_base_renderers.py:612[0m, in [0;36mIFrameRenderer.build_filename[0;34m(self)[0m
[1;32m    610[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mbuild_filename[39m([38;5;28mself[39m):
[1;32m    611[0m     ip [38;5;241m=[39m IPython[38;5;241m.[39mget_ipython() [38;5;28;01mif[39;00m IPython [38;5;28;01melse[39;00m [38;5;28;01mNone[39;00m
[0;32m--> 612[0m     cell_number [38;5;241m=[39m [38;5;28mlist[39m(ip[38;5;241m.[39mhistory_manager[38;5;241m.[39mget_tail([38;5;241m1[39m))[[38;5;241m0[39m][[38;5;241m1[39m] [38;5;241m+[39m [38;5;241m1[39m [38;5;28;01mif[39;00m ip [38;5;28;01melse[39;00m [38;5;241m0[39m
[1;32m    613[0m     filename [38;5;241m=[39m [38;5;124m"[39m[38;5;132;01m{dirname}[39;00m[38;5;124m/figure_[39m[38;5;132;01m{cell_number}[39;00m[38;5;124m.html[39m[38;5;124m"[39m[38;5;241m.[39mformat(
[1;32m    614[0m         dirname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mhtml_directory, cell_number[38;5;241m=[39mcell_number
[1;32m    615[0m     )
[1;32m    616[0m     [38;5;28;01mreturn[39;00m filename

[0;31mIndexError[0m: list index out of range
IndexError: list index out of range

